 expect(response.body).to eq(alerts_path)
 expect(response).to eq(User.last.to_json)
response
User.last.to_json
valid_params
response.body
c
let(:user_attributes) { attributes_for(:user) }
user_attributes
c
@user1.id
c
@user1.id
response.body
c
params
response.body
session[:token]
c
session[:token]
User.find(session[:user_id])
c
@user.save
user_params
c
n
@current_user = User.find(@decoded[:user_id])
@current_user
n
c
@user
c
@user
@user = User.find_by_email(params[:email])
@user
c
params
@user = User.find_by_email(params[:email])
 token = JsonWebToken.encode(user_id: @user.id)
token
@user
user
c
token
@user
c
@token
token
c
n
user_params
c
n
@user
c
n
user_params
c
params
user_params
c
n
c
user_params
c
@current_user = User.find(@decoded[:user_id])
@decoded = JsonWebToken.decode(header)
header = header.split(' ').last 
header = request.headers['token']
c
params.require(:alert).permit(:alert_type, :description, :origin , tags:[])
c
params[:tags]
params[:alert][:tags]&.split
params[:alert][:tags]
params
c
alert_params
c
alert_params
c
alert_params
c
alert_params
